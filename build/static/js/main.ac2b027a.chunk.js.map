{"version":3,"sources":["components/js/TodoForm.js","components/js/Todo.js","components/js/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_ref","addTodo","_useState","useState","id","task","completed","_useState2","Object","slicedToArray","todo","setTodo","react_default","a","createElement","className","onSubmit","e","preventDefault","trim","objectSpread","uuidv4","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography_Typography","variant","textDecoration","IconButton","Delete_default","TodoList","todos","List","map","js_Todo","key","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","Typography","js_TodoForm","concat","toConsumableArray","js_TodoList","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAyCeA,MApCf,SAAAC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EACLC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJgBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACtBQ,EADsBH,EAAA,GAChBI,EADgBJ,EAAA,GAsB7B,OACEK,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYC,SAV9B,SAAsBC,GACpBA,EAAEC,iBAEER,EAAKL,KAAKc,SACZlB,EAAQO,OAAAY,EAAA,EAAAZ,CAAA,GAAKE,EAAN,CAAYN,GAAIiB,iBACvBV,EAAQH,OAAAY,EAAA,EAAAZ,CAAA,GAAKE,EAAN,CAAYL,KAAM,SAMzBO,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOhB,EAAKL,KACZsB,SAtBN,SAA+BV,GAG7BN,EAAQH,OAAAY,EAAA,EAAAZ,CAAA,GAAKE,EAAN,CAAYL,KAAMY,EAAEW,OAAOF,YAqBhCd,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQL,KAAK,UAAb,gFCHSM,MA3Bf,SAAA9B,GAAoD,IAApCU,EAAoCV,EAApCU,KAAMqB,EAA8B/B,EAA9B+B,eAAgBC,EAAchC,EAAdgC,WASpC,OACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SAC1BvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAUC,QAAS3B,EAAKJ,UAAWgC,QAVvC,WACEP,EAAerB,EAAKN,OAUlBQ,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAYxB,UAAU,YACpByB,QAAQ,QACRN,MAAO,CACLO,eAAgB/B,EAAKJ,UAAY,eAAiB,OAGnDI,EAAKL,MAERO,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWtB,EAAKN,MAeXQ,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,SCRM+B,MAff,SAAA5C,GAAyD,IAArC6C,EAAqC7C,EAArC6C,MAAOb,EAA8BhC,EAA9BgC,WAAYD,EAAkB/B,EAAlB+B,eACrC,OACEnB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACGD,EAAME,IAAI,SAAArC,GAAI,OACbE,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAKvC,EAAKN,GACVM,KAAMA,EACNsB,WAAYA,EACZD,eAAgBA,QCNpBmB,SAAoB,yBA2DXC,MAxDf,WAAe,IAAAjD,EACaC,mBAAS,IADtBI,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACN2C,EADMtC,EAAA,GACC6C,EADD7C,EAAA,GAuCb,OApCA8C,oBAAU,WAER,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IACjDI,GACFF,EAASE,IAEV,IAEHD,oBAAU,WAERI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUf,KACtD,CAACA,IA0BFjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAY9C,UAAU,QAAQyB,QAAQ,MAAtC,cAGA5B,EAAAC,EAAAC,cAACgD,EAAD,CAAU7D,QA5Bd,SAAiBS,GAEf0C,EAAQ,CAAE1C,GAAFqD,OAAAvD,OAAAwD,EAAA,EAAAxD,CAAWqC,QA2BfjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACjBH,EAAAC,EAAAC,cAACmD,EAAD,CACEpB,MAAOA,EACPb,WAbN,SAAoB5B,GAClBgD,EAASP,EAAMqB,OAAO,SAAAxD,GAAI,OAAIA,EAAKN,KAAOA,MAatC2B,eA5BN,SAAwB3B,GACtBgD,EACEP,EAAME,IAAI,SAAArC,GACR,OAAIA,EAAKN,KAAOA,EACPI,OAAAY,EAAA,EAAAZ,CAAA,GACFE,EADL,CAEEJ,WAAYI,EAAKJ,YAGdI,WC3BKyD,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac2b027a.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {v4 as uuidv4} from \"uuid\"; \nimport '../css/todoForm.css'\n\nfunction TodoForm({ addTodo }) {\n  const [todo, setTodo] = useState({\n    id: \"\",\n    task: \"\",\n    completed: false\n  });\n\n  function handleTaskInputChange(e) {\n    // e.target.value contains new input from onChange\n    // event for input elements\n    setTodo({ ...todo, task: e.target.value });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault(); // prevents browser refresh\n    // trim() gets rid of string whitespace\n    if (todo.task.trim()) {\n      addTodo({ ...todo, id: uuidv4() });\n      setTodo({ ...todo, task: \"\" });\n    }\n  }\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      <TextField\n        label=\"Task\"\n        type=\"text\"\n        name=\"task\"\n        value={todo.task}\n        onChange={handleTaskInputChange}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n}\n\nexport default TodoForm;","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport '../css/todo.css'\n\nimport React from \"react\";\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n  function handleCheckboxClick() {\n    toggleComplete(todo.id);\n  }\n\n  function handleRemoveClick() {\n    removeTodo(todo.id);\n  }\n\n  return (\n    <ListItem style={{ display: \"flex\" }}>\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\n      <Typography className='Listitems'\n        variant=\"body1\"\n        style={{\n          textDecoration: todo.completed ? \"line-through\" : null\n        }}\n      >\n        {todo.task}\n      </Typography>\n      <IconButton onClick={handleRemoveClick}>\n         <DeleteIcon /> \n      </IconButton>\n    </ListItem>\n  );\n}\n\nexport default Todo;","import { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport Todo from \"./Todo\";\n\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\n  return (\n    <List >\n      {todos.map(todo => (\n        <Todo \n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          toggleComplete={toggleComplete}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;","import {Typography} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport TodoForm from \"./components/js/TodoForm\";\nimport TodoList from \"./components/js/TodoList\";\nimport \"./App.css\"\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    // fires when app component mounts to the DOM\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    // fires when todos array gets updated\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    // adds new todo to beginning of todos array\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography className='title' variant=\"h1\">\n        React Todo\n      </Typography>      \n      <TodoForm addTodo={addTodo} />\n        <div className=\"List\">\n      <TodoList\n        todos={todos}\n        removeTodo={removeTodo}\n        toggleComplete={toggleComplete}\n      />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}